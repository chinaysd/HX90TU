C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     11/29/2018 17:03:36 PAGE 1   


C51 COMPILER V9.59.0.0, COMPILATION OF MODULE S_TOUCHKEYCFG
OBJECT MODULE PLACED IN .\Objects\S_TouchKeyCFG.obj
COMPILER INVOKED BY: E:\MDK\C51\BIN\C51.EXE ..\touch_lib\S_TouchKeyCFG.C OPTIMIZE(8,SPEED) BROWSE INCDIR(..\bsp;..\lib;.
                    -.\TimeOut;..\user;..\touch_lib) DEBUG OBJECTEXTEND PRINT(.\Listings\S_TouchKeyCFG.lst) OBJECT(.\Objects\S_TouchKeyCFG.ob
                    -j)

line level    source

   1          //*************************************************************************************************
   2          //  Copyright (c)       深圳市赛元微电子有限公司
   3          //      文件名称        :  S_TouchKeyCFG.c
   4          //      作者            : 
   5          //      模块功能        :  触控键配置文件
   6          //      版本            :
   7          //      更改记录        :
   8          //      注意事项        :  用户需要配置的文件在S_TouchKeyCFG.h中
   9          //  库版本标记  : 
  10          //************************************************************************************************
  11          
  12          #include "S_TouchKeyCFG.h"
  13          #include "SensorMethod.h"
  14          
  15          //===========================================================================
  16          //寄存器定义
  17          /*TouchKey*/
  18          sfr     TKCON   = 0XE8;
  19          sfr     TKCFG1  = 0XE2;
  20          sfr     TKCFG0  = 0XE1;
  21          
  22          /*PSW*/
  23          sfr     PSW         =   0xD0;   //程序状态字
  24          sbit    CY              =       PSW^7;  //进位
  25          
  26          //===========================================================================
  27          //全局变量定义
  28          unsigned        char    xdata   SOCAPI_TouchKeyStatus;                                  //API接口状态：bit7-一轮扫描完成标志  1:完成    0：未完成
  29                                                                                                                                                  //                         bit6-通道触摸计数溢出标志 1:溢出      0:未溢出
  30          //===============================================================================
  31          //全局变量声明：该区域不可修改
  32          unsigned        int     xdata   RawData [SOCAPI_SET_TOUCHKEY_TOTAL];                    
  33          unsigned        int             xdata   BaseLine[SOCAPI_SET_TOUCHKEY_TOTAL];
  34          unsigned        int             xdata   FilterData[SOCAPI_SET_TOUCHKEY_TOTAL];                                                                                          
  35          unsigned        char    idata   RestAreaCnt[SOCAPI_SET_TOUCHKEY_TOTAL];                         
  36          unsigned        char    idata   TouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];                            
  37          unsigned        char    idata   NoTouchCnt[SOCAPI_SET_TOUCHKEY_TOTAL];                          
  38          unsigned        char    xdata   CurrentChannel[SOCAPI_SET_TOUCHKEY_TOTAL];                                                 
  39          unsigned        char    xdata   ConfirmTouchCnt=SOCAPI_SET_TOUCHKEY_CONFIRM_CNT;        
  40          unsigned    char    idata   LowFingerDataCnt[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  41          
  42          int     xdata   DifferAccum[SOCAPI_SET_TOUCHKEY_TOTAL]; 
  43          char    xdata   SetNoiseThreshold=SOCAPI_SET_NOISE_THRESHOLD;
  44          
  45          //自定义变量
  46          unsigned        int     xdata  UpdateBaseLNum;                                          // 单键长按计数器
  47          unsigned        int     xdata  MultipleLNum;                                            // 多按键干扰计数
  48          
  49          //外部变量接口
  50          extern  unsigned        char    data            CurrentChannelMax;              //当前选中的keysensor的个数
  51          extern  bit bMultiple;  //多按键标志    
  52          extern  bit GetIsNeedUpdateBaseline(void);
  53          extern  void SetNeedUpdateBaseline(void);
C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     11/29/2018 17:03:36 PAGE 2   

  54          extern  unsigned  int SensorKeyFlag(void);
  55          extern  void MultipleDeal(unsigned char CycleCnt);
  56          
  57          
  58          
  59          //宏定义接口
  60          
  61          //=================================================================================     
  62          // 函数接口调用部分
  63          
  64          //************************************************************************
  65          // 函数功能:  按键最长的输出时间
  66          // 输入: 无
  67          // 输出: 复位时间
  68          //这个返回值的设置， 是根据有多长时间启动TouchKeyRestart（）一次
  69          //例如12ms 启动一次， 那900*12ms = 10800ms, 10.8s 此按键无效。
  70          //************************************************************************
  71          unsigned int SetOneKeyPushResetTime(void)   
  72          {
  73   1              return SOCAPI_SET_KEY_CONTI_TIME;  
  74   1      }
  75          
  76          //************************************************************************
  77          // 函数功能:  动态更新基线的时间
  78          // 输入: 无
  79          // 输出: 
  80          //************************************************************************
  81          
  82          unsigned int SetFlowResetTime(void)   
  83          {
  84   1              return SOCAPI_SET_SYNC_UPDATE; 
  85   1      }
  86          
  87          //************************************************************************
  88          // 函数功能: 更新速度 
  89          // 输入: 无
  90          // 输出:阈值
  91          // 备注: 定义阈值大小， 可选的值0~255.一般设置为120，较大的参数数值
  92          // 能够产生较慢的基本线更新速度。
  93          //************************************************************************
  94          
  95          int  GetBaselineUpdateThreshold(void)
  96          {
  97   1              return SOCAPI_SET_UPDATE_SPEED; 
  98   1      }
  99          
 100          //************************************************************************
 101          // 函数功能: 初始化自动校准次数 
 102          // 输入: 无
 103          // 输出:阈值
 104          // 备注: 定义阈值大小， 可选的值0~100一般设置为48
 105          //************************************************************************
 106          unsigned char GetInitAutoUpdateTime(void)
 107          {
 108   1              return SOCAPI_INIT_AUTO_UPDATE_TIME; 
 109   1      }
 110          
 111          //************************************************************************
 112          // 函数功能: 进行CS 测试
 113          // 输入: 无
 114          // 输出: 
 115          // 备注: 
C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     11/29/2018 17:03:36 PAGE 3   

 116          //************************************************************************
 117          char GetCsFunction(void)
 118          {
 119   1              return SOCAPI_SET_CS_FUNCTION; 
 120   1      }
 121          
 122          //************************************************************************
 123          //函数功能: 获取当前的finger 值
 124          //输入: index 
 125          //输出: 输出手指阈值
 126          //************************************************************************
 127          int code FingerThresholdtmp[16]={\
 128                          SOCAPI_KEY0_FINGER_THRESHOLD,\
 129                          SOCAPI_KEY1_FINGER_THRESHOLD,\
 130                          SOCAPI_KEY2_FINGER_THRESHOLD,\
 131                          SOCAPI_KEY3_FINGER_THRESHOLD,\
 132                          SOCAPI_KEY4_FINGER_THRESHOLD,\
 133                          SOCAPI_KEY5_FINGER_THRESHOLD,\
 134                          SOCAPI_KEY6_FINGER_THRESHOLD,\
 135                          SOCAPI_KEY7_FINGER_THRESHOLD,\
 136                          SOCAPI_KEY8_FINGER_THRESHOLD,\
 137                          SOCAPI_KEY9_FINGER_THRESHOLD,\
 138                          SOCAPI_KEY10_FINGER_THRESHOLD,\
 139                          SOCAPI_KEY11_FINGER_THRESHOLD,\
 140                          SOCAPI_KEY12_FINGER_THRESHOLD,\
 141                          SOCAPI_KEY13_FINGER_THRESHOLD,\
 142                          SOCAPI_KEY14_FINGER_THRESHOLD,\
 143                          SOCAPI_KEY15_FINGER_THRESHOLD,          
 144                  };
 145          
 146          int  GetCurrFingerValue(unsigned char i)
 147          {
 148   1              return FingerThresholdtmp[CurrentChannel[i]]; 
 149   1      }
 150          //************************************************************************
 151          //函数功能:检测是否是弹簧滑条或者双键
 152          //输入: 无 
 153          //输出: =1 表示是滑条或者是双键
 154          //
 155          //************************************************************************
 156          unsigned char IsDoubleKeyOrSlideKey(void)
 157          {
 158   1      #if (SOCAPI_SET_SLIDE_KEY_FUNCTION)
                      return 1;
              #else
 161   1              return 0; 
 162   1      #endif 
 163   1      
 164   1      }
 165          //************************************************************************
 166          //函数功能:检测按键弹起次数
 167          //输入: 无 
 168          //输出: 返回按键弹起确认次数
 169          //
 170          //************************************************************************
 171          
 172          unsigned char GetUpConfirmCnt(void)
 173          {
 174   1              return ConfirmTouchCnt>>1;
 175   1      }
 176          
 177          //************************************************************************
C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     11/29/2018 17:03:36 PAGE 4   

 178          //函数功能:获取按键抑制确认次数
 179          //输入: 无 
 180          //输出: 返回抑制次数
 181          //
 182          //************************************************************************
 183          
 184          unsigned char GetTKYzCnt(void)
 185          {
 186   1              return (ConfirmTouchCnt/3);
 187   1      }
 188          
 189          //************************************************************************
 190          //函数功能:获取按键抑制区间
 191          //输入: 无 
 192          //输出: 返回抑制区间
 193          //
 194          //************************************************************************
 195          int GetTKYzThreshold(unsigned char i)
 196          {       
 197   1              int SetFingerThresholdtmp; 
 198   1              
 199   1              SetFingerThresholdtmp = GetCurrFingerValue(i); 
 200   1              SetFingerThresholdtmp = SetFingerThresholdtmp*SOCAPI_INHIBITION_ZONE/10;
 201   1              return SetFingerThresholdtmp;
 202   1      }
 203          
 204          //*************************************************************
 205          // 函数名       ：void CurrentSensorChoose(void)
 206          // 作者         ：
 207          // 功能         ：当前通道选择
 208          // 参数         ：无
 209          // 返回值       ：无
 210          // 调用全局变量：无
 211          // 修改全局变量：无
 212          // 备注         ：
 213          //**************************************************************
 214          void CurrentSensorChoose(void)
 215          {
 216   1              unsigned char   i;
 217   1              unsigned char   Ctk_Channel_mark = 0;
 218   1              unsigned int    CurrentSensorKey; 
 219   1              
 220   1              CurrentSensorKey = SOCAPI_SET_TOUCHKEY_CHANNEL; 
 221   1                      
 222   1              for(i=0;i<16;i++)
 223   1              {
 224   2                      CurrentSensorKey=CurrentSensorKey>>1;
 225   2                      if(CY)
 226   2                      {
 227   3                              CurrentChannel[Ctk_Channel_mark] = i;                                           //选择触摸当前的通道
 228   3                              Ctk_Channel_mark++;
 229   3                              if(Ctk_Channel_mark >= SOCAPI_SET_TOUCHKEY_TOTAL)
 230   3                                      break;
 231   3                      }               
 232   2              }
 233   1              CurrentChannelMax = Ctk_Channel_mark;                                                   //当前选择的按键数 
 234   1      }
 235          
 236          //*************************************************************
 237          // 函数名       ：void TouchKeyCFGInit(void)
 238          // 作者         ：
 239          // 功能         ：初始化TK 寄存器等
C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     11/29/2018 17:03:36 PAGE 5   

 240          // 参数         ：无
 241          // 返回值       ：无
 242          // 调用全局变量：无
 243          // 修改全局变量：无
 244          // 备注         ：
 245          //**************************************************************
 246          void TouchKeyCFGInit(void)
 247          {
 248   1              CurrentSensorChoose(); 
 249   1              TKCON = 0x80;                                                                   //打开Touch Key电源;选择内建稳压源;    
 250   1          TKCFG0 = ((SOCAPI_SET_TKCFG3&0x0f)<<4)|(SOCAPI_SET_TKCFG2&0x0f);
 251   1          TKCFG1 = ((SOCAPI_SET_TKCFG1&0x10)<<3)|(SOCAPI_SET_TKCFG2&0x30)|((SOCAPI_SET_TKCFG3&0x70)>>4);   
 252   1              UpdateBaseLNum = 0; 
 253   1      }
 254          
 255          //*************************************************************
 256          //                      检测按键接口
 257          //输入: 无
 258          //输出:按键通道， 返回的是一个int , 通道数。 
 259          //备注: 这个函数完成了几个内容
 260          //  1, 调用触控库检测函数SensorKeyFlag()
 261          // 2,  分析得出16个通道，哪个通道有按下，按下bit 位设置为1，否则为0
 262          // 3,  检测是否需要立即更新baseline:  大于MAX_KEY_RESET_BASELINE 个按键按下时立即更新baseline
 263          // 4,  双键或者单键按下时， 时间大于SetOneKeyPushResetTime()结果时更新baseline 
 264          //*************************************************************
 265          unsigned int TouchKeyScan(void)
 266          {
 267   1              unsigned char t;
 268   1              unsigned char MultipleCnt = 0;//按键计数
 269   1              unsigned int Keyvalue; 
 270   1              unsigned int KeyData = 0;       
 271   1      
 272   1              if(GetIsNeedUpdateBaseline() == 0)                              //检测是否需要更新baseline 
 273   1              {
 274   2                      Keyvalue = SensorKeyFlag();                                     //Sensor判断, 这里如果bMultiple = 1 表示中间有干扰
 275   2                                                                                                              //分析按键，得出标准的16通道bit 位
 276   2                      for(t=0;t<CurrentChannelMax;t++)
 277   2                      {
 278   3                              Keyvalue = Keyvalue>>1;
 279   3                              if(CY)
 280   3                              {
 281   4                                      KeyData |= (0x01 << (CurrentChannel[t]));       
 282   4                                      MultipleCnt++;                                                  
 283   4                              }
 284   3                      }
 285   2      
 286   2                      if(MultipleCnt >= 2)                                                                            //进入多按键处理
 287   2                      {
 288   3                              
 289   3                              bMultiple = 1;
 290   3                              
 291   3                              if(MultipleCnt >= SOCAPI_MAX_KEY_NUM_INVALID)
 292   3                              {
 293   4                                      SetNeedUpdateBaseline();                                                        // 立即更新baseline ,例如亚克力板盖上去
 294   4                              }
 295   3                              else
 296   3                              {               
 297   4                                      #if (SOCAPI_SET_SLIDE_KEY_FUNCTION)   //弹簧滑条的滑条键按下则不认为是多键
                                                      bMultiple=0; 
                                              #endif  
 300   4                              }                       
 301   3                      }                       
C51 COMPILER V9.59.0.0   S_TOUCHKEYCFG                                                     11/29/2018 17:03:36 PAGE 6   

 302   2      
 303   2                      if(bMultiple == 0)                                                      //进入按键判断
 304   2                      {               
 305   3                              if(KeyData != 0x0)                                          //单个按键达到多长时间就update baseline ,松手检测
 306   3                              {
 307   4                                      UpdateBaseLNum++; 
 308   4                              }
 309   3                              else    
 310   3                              {
 311   4                                      UpdateBaseLNum = 0;     
 312   4                              } 
 313   3                      }       
 314   2                      else
 315   2                      {   
 316   3                          //考虑基线更新              
 317   3                              MultipleLNum++; 
 318   3                              KeyData = 0x00;
 319   3                      }
 320   2      
 321   2                      if(UpdateBaseLNum > SetOneKeyPushResetTime())     //按键超出最长输出时间更新基线
 322   2                      {
 323   3                              SetNeedUpdateBaseline(); 
 324   3                              UpdateBaseLNum = 0;
 325   3                      }
 326   2                      if(MultipleLNum > SOCAPI_MAX_KEY_MUTIPLE)                 //干扰计数大于最大计数更新基线
 327   2                      {
 328   3                              SetNeedUpdateBaseline(); 
 329   3                              MultipleLNum = 0;
 330   3                      }
 331   2              
 332   2              }                       
 333   1              else
 334   1              {
 335   2                      MultipleDeal(SOCAPI_AUTO_UPDATE_TIME);                                                                          //基线复位处理
 336   2              }
 337   1              
 338   1              return KeyData;
 339   1      }
 340          
 341          
 342          
 343          
 344          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    384    ----
   CONSTANT SIZE    =     32    ----
   XDATA SIZE       =     25    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----       3
   IDATA SIZE       =      8    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
